// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenRoutePlanner.Database;

#nullable disable

namespace OpenRoutePlanner.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250517060411_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("OpenRoutePlanner.Models.BusinessAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("CostCenter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredEndorsements")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("OpenRoutePlanner.Models.DriverProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlphaCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Endorsements")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("OpenRoutePlanner.Models.RoutePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Miles")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredEndorsements")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stops")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TractorId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Trailers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TractorId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("OpenRoutePlanner.Models.Tractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeotabId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSleeper")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Odometer")
                        .HasColumnType("REAL");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("VinNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Tractors");
                });

            modelBuilder.Entity("OpenRoutePlanner.Models.DriverProfile", b =>
                {
                    b.HasOne("OpenRoutePlanner.Models.BusinessAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OpenRoutePlanner.Models.RoutePlan", b =>
                {
                    b.HasOne("OpenRoutePlanner.Models.BusinessAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("OpenRoutePlanner.Models.DriverProfile", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("OpenRoutePlanner.Models.Tractor", "Tractor")
                        .WithMany()
                        .HasForeignKey("TractorId");

                    b.Navigation("Account");

                    b.Navigation("Driver");

                    b.Navigation("Tractor");
                });

            modelBuilder.Entity("OpenRoutePlanner.Models.Tractor", b =>
                {
                    b.HasOne("OpenRoutePlanner.Models.DriverProfile", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.Navigation("Driver");
                });
#pragma warning restore 612, 618
        }
    }
}
