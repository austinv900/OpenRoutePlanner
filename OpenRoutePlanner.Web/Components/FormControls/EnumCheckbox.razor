@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@typeparam TEnum where TEnum : struct, Enum
@inherits InputBase<TEnum>

<div class="enum-checkbox">
    @foreach (var value in Enum.GetValues<TEnum>())
    {
        int intVal = Convert.ToInt32(value);
        if (intVal == 0)
        {
            continue;
        }

        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="@value.ToString()" checked="@IsChecked(value)" @onchange="e => OnCheckboxChange(value, e)" />
            <label class="form-check-label" for="@value.ToString()">@value.Display(ShortName)</label>
        </div>
    }

    <ValidationMessage For="@(() => Value)" />
</div>

@code {
    [Parameter] public bool ShortName { get; set; } = false;

    private bool IsChecked(TEnum value)
    {
        return Value.HasFlag(value);
    }

    private async Task OnCheckboxChange(TEnum @enum, ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out var isChecked))
        {
            int currentValue = Convert.ToInt32(Value);
            int flagInt = Convert.ToInt32(@enum);
            int newValue = isChecked ? currentValue | flagInt : currentValue & ~flagInt;
            Value = (TEnum)Enum.ToObject(typeof(TEnum), newValue);

            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TEnum result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = default!;
        validationErrorMessage = null;

        if (string.IsNullOrWhiteSpace(value))
        {
            return true;
        }

        try
        {
            result = (TEnum)Enum.Parse(typeof(TEnum), value, ignoreCase: true);
            return true;
        }
        catch
        {
            validationErrorMessage = $"Invalid value for {FieldIdentifier.FieldName}: '{value}'.";
            return false;
        }
    }
}
