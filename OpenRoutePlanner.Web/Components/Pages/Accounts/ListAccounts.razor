@page "/accounts"
@using OpenRoutePlanner.ModelManagers
@using OpenRoutePlanner.Models
@using System.Net
@using System.Collections.Immutable
@using System.Globalization
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject AccountModelManager AccountManager
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContext

<PageTitle>Accounts</PageTitle>

<div class="d-flex justify-content-between align-items-center flex-wrap gap-2 mb-3">
    <h2 class="mb-0">Accounts</h2>
    <div class="input-group w-auto">
        <input type="text" class="form-control" placeholder="Search..." @bind="_searchTerm" @bind:event="oninput" />
    </div>
    <button class="btn btn-primary" @onclick="() => NavigateEdit(null)">
        <i class="fa-solid fa-plus me-2"></i> Create Account
    </button>
</div>

<div class="mb-3">
    <label class="form-label me-2">Sort by:</label>
    <select class="form-select d-inline w-auto" @bind="_sortOption">
        <option value="name">Name</option>
        <option value="email">Email</option>
        <option value="phone">Phone</option>
    </select>
</div>

<ul class="list-unstyled row row-cols-1 row-cols-md-2 row-cols-xl-3 g-3">
    @foreach (var account in FilteredAccounts)
    {
        <li class="col">
            <div class="card h-100">
                <div class="card-body d-flex flex-column justify-content-between">
                    <h5 class="card-title">@account.ShortName</h5>

                    <div class="mb-2 small">
                        <strong>Email: </strong>
                        @if (!string.IsNullOrWhiteSpace(account.Email))
                        {
                            <a href="mailto:@account.Email">@account.Email</a>
                        }
                        else
                        {
                            <span class="text-muted">N/A</span>
                        }
                        <br />

                        <strong>Phone: </strong>
                        @if (!string.IsNullOrWhiteSpace(account.PhoneNumber))
                        {
                            <a href="tel:@account.PhoneNumber">@account.PhoneNumber</a>
                        }
                        else
                        {
                            <span class="text-muted">N/A</span>
                        }
                        <br />

                        <strong>Address:</strong> @account.Address <br />
                        <strong>Cost Center:</strong> @account.CostCenter <br />
                        <strong>Endorsements:</strong> @account.RequiredEndorsements.Display(true)
                    </div>
                </div>
                <div class="card-footer bg-transparent border-top-0 d-flex justify-content-end gap-2">
                    <button class="btn btn-sm btn-outline-warning" title="Edit" @onclick="() => NavigateEdit(account.Id)">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => DeleteAccount(account)">
                        <i class="fa-solid fa-trash-can"></i>
                    </button>
                </div>
            </div>
        </li>
    }
</ul>

@code {
    private ImmutableArray<BusinessAccount> AccountList { get; set; } = ImmutableArray<BusinessAccount>.Empty;
    private string _searchTerm = string.Empty;
    private string _sortOption = "name";

    private IEnumerable<BusinessAccount> FilteredAccounts => AccountList
        .Where(a => string.IsNullOrWhiteSpace(_searchTerm)
            || a.ShortName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
            || (a.Email?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            || (a.PhoneNumber?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
        .OrderBy(a => _sortOption switch
        {
            "email" => a.Email,
            "phone" => a.PhoneNumber,
            _ => a.ShortName
        }, StringComparer.OrdinalIgnoreCase);

    protected override async Task OnInitializedAsync()
    {
        AccountList = await AccountManager.List(null, HttpContext.HttpContext?.RequestAborted ?? CancellationToken.None);
    }

    private async Task DeleteAccount(BusinessAccount account)
    {
        HttpStatusCode responseCode = await AccountManager.Delete(account.Id);

        if (responseCode == HttpStatusCode.OK)
        {
            AccountList = AccountList.Remove(account);
            StateHasChanged();
            return;
        }

        // TODO: Display Error
    }

    private void NavigateEdit(Guid? id = null)
    {
        if (id.HasValue)
        {
            Navigation.NavigateTo($"/modify-account/{id.Value}");
        }
        else
        {
            Navigation.NavigateTo("/modify-account");
        }
    }
}
