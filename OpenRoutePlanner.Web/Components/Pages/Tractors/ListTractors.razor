@page "/tractors"
@using OpenRoutePlanner.ModelManagers
@using OpenRoutePlanner.Models
@using System.Net
@using System.Collections.Immutable
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject TractorsModelManager TractorManager
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContext

<PageTitle>Tractors</PageTitle>

<div class="d-flex justify-content-between align-items-center flex-wrap gap-2 mb-3">
    <h2 class="mb-0">Tractors</h2>
    <div class="input-group w-auto">
        <input type="text" class="form-control" placeholder="Search..." @bind="_searchTerm" @bind:event="oninput" />
    </div>
    <button class="btn btn-primary" @onclick="() => NavigateEdit(null)">
        <i class="fa-solid fa-plus me-2"></i> Add Tractor
    </button>
</div>

<div class="mb-3">
    <label class="form-label me-2">Sort by:</label>
    <select class="form-select d-inline w-auto" @bind="_sortOption">
        <option value="name">Name</option>
        <option value="vin">VIN</option>
        <option value="odometer">Odometer</option>
    </select>
</div>

<ul class="list-unstyled row row-cols-1 row-cols-md-2 row-cols-xl-3 g-3">
    @foreach (var tractor in FilteredTractors)
    {
        <li class="col">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">@tractor.Name</h5>
                    <div class="mb-2 small">
                        <strong>VIN:</strong> @(tractor.VinNumber ?? "N/A") <br />
                        <strong>Type:</strong>
                        @if (tractor.IsSleeper)
                        {
                            <span class="badge bg-info text-dark">Sleeper</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Day Cab</span>
                        }
                        <br />
                        <strong>Driver:</strong> @(tractor.Driver?.FullName ?? "Unassigned") <br />
                        <strong>Odometer:</strong> @($"{tractor.Odometer:N0} mi") <br />
                        <strong>License Plate:</strong> @(tractor.LicensePlate ?? "N/A") <br />
                        <strong>State:</strong> @(tractor.State ?? "N/A") <br />
                        <strong>Geotab Id:</strong> @(tractor.GeotabId ?? "N/A")
                    </div>
                </div>
                <div class="card-footer bg-transparent border-top-0 d-flex justify-content-end gap-2">
                    <button class="btn btn-sm btn-outline-warning" title="Edit" @onclick="() => NavigateEdit(tractor.Id)">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => RemoveModel(tractor)">
                        <i class="fa-solid fa-trash-can"></i>
                    </button>
                </div>
            </div>
        </li>
    }
</ul>

@code {
    private ImmutableArray<Tractor> TractorList { get; set; } = ImmutableArray<Tractor>.Empty;
    private string _searchTerm = string.Empty;
    private string _sortOption = "name";

    private IEnumerable<Tractor> FilteredTractors => TractorList
        .Where(t => string.IsNullOrWhiteSpace(_searchTerm)
            || t.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
            || (t.VinNumber?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            || (t.Driver?.FullName?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
        .OrderBy(t => _sortOption switch
        {
            "vin" => t.VinNumber,
            "odometer" => t.Odometer.ToString("D"),
            _ => t.Name
        }, StringComparer.OrdinalIgnoreCase);

    protected override async Task OnInitializedAsync()
    {
        TractorList = await TractorManager.List(new()
        {
            IncludeDriver = true
        }, HttpContext.HttpContext?.RequestAborted ?? CancellationToken.None);
        StateHasChanged();
    }

    private async Task RemoveModel(Tractor model)
    {
        HttpStatusCode responseCode = await TractorManager.Delete(model.Id, HttpContext.HttpContext?.RequestAborted ?? CancellationToken.None);

        if (responseCode == HttpStatusCode.OK)
        {
            TractorList = TractorList.Remove(model);
            StateHasChanged();
            return;
        }

        // TODO: Display Error
    }

    private void NavigateEdit(Guid? id = null)
    {
        if (id.HasValue)
        {
            Navigation.NavigateTo($"/modify-tractor/{id.Value}");
        }
        else
        {
            Navigation.NavigateTo("/modify-tractor");
        }
    }
}
